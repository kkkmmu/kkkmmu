1. 其实从原理上来说，只需要CPU和寄存器就可以运行程序了。但是寄存器的数目毕竟有限，而且价格昂贵。因此如果需要跑比较复杂的程序，必然会出现寄存器不够的情况(变量过多或者数据过或者程序逻辑太过复杂），此时就需要一个通用的解决方案来解决寄存器不足时程序的运行问题。
	内存就是在这种情况下被引入的。但是具体如何用内存来解决这些问题还是值得思考的。
		1. 变量过多：简单的将变量存储在内存中即可解决。
		2. 数据过大：简单的将数据存储在内存中既可解决。
		3. 逻辑复杂：解决复杂问题的基本思路都是分治法，将复杂的问题拆分为小的简单的问题，先解决简单的问题，然后再把结果组合起来。可是如何通过内存来实现这一思路呢？首先来看下讲复杂问题拆分以后我们遇到的问题：
			a. 每个子问题必然对应一组数据输入，需要一个业务逻辑，然后会有一个输出。每个子问题的数据，业务逻辑不能相互干扰。
			b. 我们需要将子问题的输入，业务逻辑保存在内存中，然后让CPU来运行该业务逻辑以获取输出。
				对于这两个问题将内存分段即可，每个段保存不同的子问题业务逻辑，以及数据即可。
			d. 拆分后的子问题必然有一个依赖关系，如果保障这种依赖。也就是说，某些子问题需要依赖其他子问题的处理结果，来支持自己的后续处理。


0x08048428 <main+0>:    push   %ebp                 ; save previous value.
0x08048429 <main+1>:    mov    %esp,%ebp            ; create new stack frame.
0x0804842b <main+3>:    and    $0xfffffff0,%esp     ; align to boundary.
0x0804842e <main+6>:    sub    $0x10,%esp           ; make space on stack.

0x08048431 <main+9>:    movl   $0x3,0x8(%esp)       ; push values for function.
0x08048439 <main+17>:   movl   $0x2,0x4(%esp)
0x08048441 <main+25>:   movl   $0x1,(%esp)
0x08048448 <main+32>:   call   0x8048404 <function> ; and call it.

0x0804844d <main+37>:   leave                       ; tear down frame.
0x0804844e <main+38>:   ret                         ; and exit.

0x08048404 <func+0>:    push   %ebp                 ; save previous value.
0x08048405 <func+1>:    mov    %esp,%ebp            ; create new stack frame.
0x08048407 <func+3>:    sub    $0x28,%esp           ; make space on stack.
0x0804840a <func+6>:    mov    %gs:0x14,%eax        ; get sentinel value.
0x08048410 <func+12>:   mov    %eax,-0xc(%ebp)      ; put on stack.

0x08048413 <func+15>:   xor    %eax,%eax            ; set return code 0.

0x08048415 <func+17>:   mov    -0xc(%ebp),%eax      ; get sentinel from stack.
0x08048418 <func+20>:   xor    %gs:0x14,%eax        ; compare with actual.
0x0804841f <func+27>:   je     <func+34>            ; jump if okay.
0x08048421 <func+29>:   call   <_stk_chk_fl>        ; otherwise corrupted stack.
0x08048426 <func+34>:   leave                       ; tear down frame.
0x08048427 <func+35>:   ret                         ; and exit.
