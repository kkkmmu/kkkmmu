#!/bin/sh
#
# Copyright © 2014-2015 Backtrace I/O, Inc.
# Copyright © 2009-2013 Samy Al Bahra.
# Copyright © 2011 Devon H. O'Dell <devon.odell@gmail.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

##
# If a library is specified in X:Y form, then detection of X expands Y to X
# during build file preprocessing.
##
REQUIRE_LIBRARY_STATIC=""
REQUIRE_LIBRARY_STATIC_NOW=""
REQUIRE_LIBRARY=""

REQUIRE_HEADER="stdint.h stdlib.h string.h errno.h sys/types.h"

LDOBJECT=

EXIT_SUCCESS=0
EXIT_FAILURE=1
WANT_PIC=yes
REPLACE=""


P_PWD=`pwd`
MAINTAINER='roneill@backtrace.io'
VERSION=${VERSION:-'0.1.0'}
VERSION_MAJOR='0'
BUILD="$PWD/build/libelfmaster.build"
PREFIX=${PREFIX:-"/opt/elfmaster"}
INSTALL_PREFIX=${INSTALL_PREFIX:-"/opt/elfmaster"}

OPTION_CHECKING=1
PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/opt/elfmaster/lib/pkgconfig

export PKG_CONFIG_PATH
export CFLAGS
export CXXFLAGS
export PREFIX
LC_ALL=C
export LC_ALL


if test -n "${BASH_VERSION+set}" && (set -o posix) >/dev/null 2>&1; then
 	set -o posix
fi

trap epilog 1 2 3 6

epilog()
{
	rm -f .1.c .1
}

assert()
{

	if test "$#" -eq 2; then
		fail=$2
		print=true
	elif test "$#" -eq 3; then
		fail=$3
		print=echo
	else
		echo "Usage: assert <test> <fail string> or assert <test> <success string> <fail string>" 1>&2
		exit $EXIT_FAILURE
	fi

	if test -z "$1"; then
		echo "failed  [$fail]"
		exit $EXIT_FAILURE
	else
		${print} "success [$1]"
	fi
}

generate()
{
	mkdir -p `dirname $2	`
	sed -e "s#@PROFILE@#$PROFILE#g"						\
	    -e "s#@VERSION@#$VERSION#g"						\
	    -e "s#@VERSION_MAJOR@#$VERSION_MAJOR#g"				\
	    -e "s#@CC@#$CC#g"							\
	    -e "s#@CXX@#$CXX#g"							\
	    -e "s#@CFLAGS@#$CFLAGS#g"						\
	    -e "s#@CXXFLAGS@#$CXXFLAGS#g"					\
	    -e "s#@HEADERS@#$HEADERS#g"						\
	    -e "s#@LIBRARY@#$LIBRARY#g"						\
	    -e "s#@PREFIX@#$PREFIX#g"						\
	    -e "s#@LD@#$LD#g"							\
	    -e "s#@LDFLAGS@#$LDFLAGS#g"						\
	    -e "s#@LDSONAME@#$LDSONAME#g"					\
	    -e "s#@PTHREAD_CFLAGS@#$PTHREAD_CFLAGS#g"				\
	    -e "s#@MANDIR@#$MANDIR#g"						\
	    -e "s#@GZIP@#$GZIP#g"						\
	    -e "s#@GZIP_SUFFIX@#$GZIP_SUFFIX#g"					\
	    -e "s#@BUILD_DIR@#$P_PWD#g"						\
	    -e "s#@SRC_DIR@#$BUILD_DIR#g"					\
	    -e "s#@SYSTEM@#$SYSTEM#g"						\
	    -e "s#@MAKE@#$MAKE#g"						\
	    -e "s#@LDOBJECT@#$LDOBJECT#g"					\
	    -e "s#@PROTOCC@#$PROTOCC#g"						\
	    -e "s#@INSTALL_PREFIX@#$INSTALL_PREFIX#g"				\
	    -e "s#@PTRACE_BUILD_STRING@#$PTRACE_BUILD_STRING#g"			\
	    -e "s#@PTRACE_WITH_GETLINE@#$PTRACE_WITH_GETLINE#g"			\
	    -e "s#@INSTALL_PREFIX@#$INSTALL_PREFIX#g"				\
	    -e "s#@EXPIRATION_SEC@#$EXPIRATION_SEC#g"				\
	    -e "$REPLACE"							\
		$1 > $2
}

check_lib()
{
	if test "$#" -lt 1; then
		echo "Usage: check_lib <full_path_to_lib>"
	fi

	cat << EOF > .1.c
int main(void) { return 0; }
EOF
	$CC -m64 -o .1 .1.c $CFLAGS $1 2> /dev/null
	hf_s=$?

	rm -f .1 .1.c
	if test $hf_s -eq 0; then
	    if test "$2" != ""; then
		 echo "success [$1]"
	    else
	         echo "success [$i]"
	    fi
	else
	    return 1
	fi

	return 0
}

generate_stdout()
{

	echo
	echo "           VERSION = $VERSION"
	echo "         BUILD_DIR = $P_PWD"
	echo "    INSTALL_PREFIX = $INSTALL_PREFIX"
	echo "           SRC_DIR = $BUILD_DIR"
	echo "            SYSTEM = $SYSTEM"
	echo "           PROFILE = $PROFILE"
	echo "                CC = $CC"
	echo "               CXX = $CXX"
	echo "          COMPILER = $COMPILER"
	echo "            CFLAGS = $CFLAGS"
	echo "          CXXFLAGS = $CXXFLAGS"
	echo "    PTHREAD_CFLAGS = $PTHREAD_CFLAGS"
	echo "                LD = $LD"
	echo "           LDFLAGS = $LDFLAGS"
	echo "              GZIP = $GZIP"
	echo "              MAKE = $MAKE"
	echo "          LDOBJECT = $LDOBJECT"
	echo
	echo "Headers will be installed in $HEADERS"
	echo "Libraries will be installed in $LIBRARY"
	echo "Documentation will be installed in $MANDIR"
}

for option in $*; do
	value=`echo "$option" | sed -e 's/^[^=]*=\(.*\)/\1/'`

	case "$option" in
	--help)
		echo "Usage: $0 [OPTIONS]"
		echo
		echo "The following options may be used for cross-building."
		echo "  --profile=N              Use custom build profile (use in conjunction with \$CC)"
		echo
		echo "The following options may be used to modify installation behavior."
		echo "  --includedir=N           Headers directory (default is ${PREFIX}/include)"
		echo "  --libdir=N               Libraries directory (default is ${PREFIX}/lib)"
		echo "  --mandir=N               Manual pages directory (default is ${PREFIX}/man)"
		echo "  --prefix=N               Installs library files in N (default is $PREFIX)"
		echo "  --install-prefix=N       Specifies installation prefix (default is ${INSTALL_PREFIX})"
		echo
		echo "The following environment variables may be used:"
		echo "   CC       C compiler command"
		echo "   CXX      C++ compiler command"
		echo "   CFLAGS   C compiler flags"
		echo "   CXXFLAGS C++ compiler flags"
		echo "   LDFLAGS  Linker flags"
		echo "   GZIP     GZIP compression tool"
		echo
		echo "Report bugs to ${MAINTAINER}."
		exit $EXIT_SUCCESS
		;;
	--prefix=*)
		PREFIX=$value
		;;
	--includedir=*)
		HEADERS=$value
		;;
	--libdir=*)
		LIBRARY=$value
		;;
	--mandir=*)
		MANDIR=$value
		;;
	--install-prefix=*)
		INSTALL_PREFIX=$value
		;;
	--build=*|--host=*|--target=*|--exec-prefix=*|--bindir=*|--sbindir=*|\
	--sysconfdir=*|--datadir=*|--libexecdir=*|--localstatedir=*|\
	--sharedstatedir=*|--infodir=*|--enable-shared|--disable-shared|\
	--enable-static|\
	--cache-file=*|--srcdir=*)
		# ignore for compat with regular configure
		;;
	--with-pic)
		WANT_PIC=yes
		;;
	--without-pic)
		WITHOUT_PIC=no
		;;
	--disable-option-checking)
		OPTION_CHECKING=0
		;;
	--*)
		if test "$OPTION_CHECKING" -eq 1; then
			echo "$0 [--help]"
			echo "Unknown option $option"
			exit $EXIT_FAILURE
		fi
		;;
	*=*)
		NAME=`expr "$option" : '\([^=]*\)='`
		VALUE=`echo "$value" | sed "s/'/'\\\\\\\\''/g"`
		eval "$NAME='$VALUE'"
		export $NAME
		;;
	*)
		echo "$0 [--help]"
		exit $EXIT_FAILURE
		;;
	esac
done

PATH="${PREFIX}/bin:$PATH"

HEADERS=${HEADERS:-"${PREFIX}/include"}
LIBRARY=${LIBRARY:-"${PREFIX}/lib"}
MANDIR=${MANDIR:-"${PREFIX}/share/man"}
GZIP=${GZIP:-"gzip -c"}
LIBSUFFIX="so"
STATIC_LIBSUFFIX="a"
MAKE=${MAKE:-"make"}
PL="${LIBRARY} /lib/amd64 /usr/lib/amd64 /usr/lib /usr/lib/x86_64-linux-gnu /usr/lib64 /usr/local/lib/amd64 /usr/local/lib /usr/local/lib64"

PTRACE_BUILD_STRING=${PTRACE_BUILD_STRING:-'\"\"'}
EXPIRATION_SEC=${EXPIRATION_SEC:-"0"}
PTRACE_WITH_GETLINE="PTRACE_STANDARD_GETLINE"

printf "Detecting operating system......."
SYSTEM=`uname -s 2> /dev/null`
if test "$SYSTEM" = "Darwin"; then
	LDFLAGS="-Wl,-rpath,${LIBRARY} $LDFLAGS"
elif test "$SYSTEM" = "SunOS"; then
	LDFLAGS="-Wl,-rpath,${LIBRARY} $LDFLAGS"
else
	LDFLAGS="-Wl,-rpath,${LIBRARY} -Wl,-rpath-link,${LIBRARY} $LDFLAGS"
fi

TCMALLOC="tcmalloc:@LIBTCMALLOC@"
JEMALLOC="jemalloc:@LIBJEMALLOC@"

case "$SYSTEM" in
	"SunOS")
		SYSTEM=sunos
		CFLAGS="-D_LARGEFILE64_SOURCE -D__EXTENSIONS__ $CFLAGS"
		LDFLAGS="$LDFLAGS -lkstat"
		MAKE=gmake
		;;
	"Linux"|"uClinux")
		SYSTEM=linux
		;;
	"FreeBSD"|"GNU/kFreeBSD")
		SYSTEM=freebsd
		CFLAGS="$CFLAGS -D__BSD_VISIBLE"
		PTRACE_WITH_GETLINE="_WITH_GETLINE"
		REQUIRE_LIBRARY="$REQUIRE_LIBRARY c++"
		JEMALLOC="c:@LIBJEMALLOC@"
		;;
	"NetBSD")
		SYSTEM=netbsd
		;;
	"OpenBSD")
		SYSTEM=openbsd
		;;
	"DragonFly")
		SYSTEM=dragonflybsd
		;;
	"Darwin")
		SYSTEM=darwin
		;;
	MINGW32*)
		SYSTEM=mingw32
		LDFLAGS="-mthreads $LDFLAGS"
		;;
	*)
		SYSTEM=
		;;
esac

OPTIONAL_LIBRARY="$JEMALLOC $TCMALLOC"

assert "$SYSTEM" "$SYSTEM" "unsupported"

printf "Detecting machine architecture..."
PLATFORM=`uname -m 2> /dev/null`
case $PLATFORM in
	"macppc"|"Power Macintosh"|"powerpc")
		PLATFORM=ppc
		ENVIRONMENT=32
		LDFLAGS="-m32 $LDFLAGS"
		;;
	"sun4u"|"sun4v"|"sparc64")
		PLATFORM=sparcv9
		ENVIRONMENT=64
		LDFLAGS="$LDFLAGS"
		;;
	i386|i486|i586|i686|i586_i686|pentium*|athlon*|k5|k6|k6_2|k6_3)
		MM="${MM:-"CK_MD_TSO"}"
		case $SYSTEM in
			darwin)
				ENVIRONMENT=64
				PLATFORM=x86_64
				;;
			freebsd)
				PLATFORM=x86
				ENVIRONMENT=32

				# FreeBSD doesn't give us a nice way to determine the CPU
				# class of the running system, reporting any 32-bit x86
				# architecture as i386. 486 is its minimum supported CPU
				# class and cmpxchg8b was implemented first in i586.
				dmesg | grep -q "486-class"
				if test "$?" -eq 0; then
					assert "" "" "Must have an i586 class or higher CPU"
				fi

				# FreeBSD still generates code for 486-class CPUs as its
				# default 32-bit target, but we need 586 at the least.
				echo "$CFLAGS" | grep -q 'march='
				if test "$?" -ne 0; then
					# Needed for cmpxchg8b
					CFLAGS="$CFLAGS -march=i586"
				fi
				;;
			linux)
				case $PLATFORM in
					i386|i486)
						assert "" "" "Must have an i586 class or higher CPU"
						;;
				esac

				PLATFORM=x86
				ENVIRONMENT=32
				;;

			*)
				PLATFORM=x86
				ENVIRONMENT=32
				assert "$PLATFORM $ENVIRONMENT" "$PLATFORM $ENVIRONMENT" "unsupported"
				;;
		esac
		;;
	"amd64"|"x86_64")
		PLATFORM=x86_64
		ENVIRONMENT=64
		LDFLAGS="$LDFLAGS"
		;;
	"i86pc")
		ISA=`isainfo -n 2> /dev/null || echo i386`
		case "$ISA" in
			"amd64")
				PLATFORM=x86_64
				ENVIRONMENT=64
				;;
			*)
				PLATFORM=x86
				ENVIRONMENT=32
				assert "$PLATFORM $ENVIRONMENT" "$PLATFORM $ENVIRONMENT" "unsupported"
				;;
		esac
		;;
	"ppc64")
		PLATFORM=ppc64
		ENVIRONMENT=64
		;;
	arm|armv6l|armv7l)
		PLATFORM=arm
		ENVIRONMENT=32
		;;
	*)
		PLATFORM=
		;;
esac

case $ENVIRONMENT in
	"64")
		CFLAGS="$CFLAGS -m64"
		CXXFLAGS="$CXXFLAGS -m64"
		if test "$SYSTEM" = "sunos" ; then
		    LDFLAGS="$LDFLAGS -m64"
		fi
		;;
	*)
		;;
esac

assert "$PLATFORM" "$PLATFORM" "unsupported"

# `which` on Solaris sucks
pathsearch()
{
	what=$1
	oldFS="$IFS"
	IFS=":"
	for d in $PATH ; do
		if test -x "$d/$what" ; then
			echo "$d/$what";
			IFS="$oldFS"
			return
		fi
	done
	IFS="$oldFS"
}

printf "Finding dirname command.........."
DIRNAME=`pathsearch "${DIRNAME:-dirname}"`
if test -z "$DIRNAME" -o ! -x "$DIRNAME"; then
	DIRNAME=`pathsearch "${DIRNAME:-dirname}"`
	DIRNAME="$DIRNAME"
else
	echo "success [$DIRNAME]"
fi

if test -z "$DIRNAME"; then
	echo "not found (out of source build unsupported)"
else
	printf "Determining build directory......"

	BUILD_DIR=`$DIRNAME $0`
	cd `$DIRNAME $0`
	BUILD_DIR=`pwd`

	echo "success [$BUILD_DIR]"
fi

printf "Finding gzip tool................"
GZIP=`pathsearch "${GZIP:-gzip}"`
if test -z "$GZIP" -o ! -x "$GZIP"; then
	GZIP=`pathsearch "${GZIP:-gzip}"`
	GZIP="$GZIP"
fi

if test -z "$GZIP"; then
	echo "not found"
	GZIP=cat
	GZIP_SUFFIX=""
else
	echo "success [$GZIP]"
	GZIP="$GZIP -c"
	GZIP_SUFFIX=".gz"
fi

printf "Finding suitable C compiler......"
CC=`pathsearch "${CC:-cc}"`
if test -z "$CC" -o ! -x "$CC"; then
	CC=`pathsearch "${CC:-gcc}"`
fi
assert "$CC" "not found"

cat << EOF > .1.c
#include <stdio.h>
int main(void) {
#if defined(_WIN32)
#if defined(__MINGW64__)
	puts("mingw64");
	return (0);
#elif defined(__MINGW32__) && (__MINGW32_MAJOR_VERSION >= 3)
	puts("mingw32");
	return (0);
#else
	return (1);
#endif /* __MINGW32__ && __MINGW32_MAJOR_VERSION >= 3 */
#elif defined(__clang__) && (__clang_major__ >= 4)
	puts("clang");
	return (0);
#elif defined(__SUNPRO_C) && (__SUNPRO_C >= 0x5110)
	puts("suncc");
	return (0);
#elif defined(__GNUC__) && (__GNUC__ >= 4)
	puts("gcc");
	return (0);
#else
	return (1);
#endif
}
EOF

$CC -o .1 .1.c
COMPILER=`./.1`
r=$?
rm -f .1.c .1

if test "$r" -ne 0; then
	assert "" "update compiler"
else
	echo "success [$CC]"
fi

printf "Finding suitable C++ compiler...."
CXX=`pathsearch "${CXX:-g++}"`
if test -z "$CXX" -o ! -x "$CXX"; then
	CXX=`pathsearch "${CXX:-clang++}"`
fi
assert "$CXX" "not found"

cat << EOF > .1.cpp
#include <iostream>
using namespace std;
int main(void) {
#if defined(_WIN32)
#if defined(__MINGW64__)
	cout << "mingw64" << endl;
	return (0);
#elif defined(__MINGW32__) && (__MINGW32_MAJOR_VERSION >= 3)
	cout << "mingw32" << endl;
	return (0);
#else
	return (1);
#endif /* __MINGW32__ && __MINGW32_MAJOR_VERSION >= 3 */
#elif defined(__clang__) && (__clang_major__ >= 4)
	cout << "clang" << endl;
	return (0);
#elif defined(__SUNPRO_C) && (__SUNPRO_C >= 0x5110)
	cout << "suncc" << endl;
	return (0);
#elif defined(__GNUG__) && (__GNUC__ >= 4)
	cout << "g++" << endl;
	return (0);
#else
	return (1);
#endif
}
EOF

$CXX -o .1 .1.cpp
CPP_COMPILER=`./.1`
r=$?
rm -f .1.cpp .1

if test "$r" -ne 0; then
	assert "" "update compiler"
else
	echo "success [$CXX]"
fi

PKG_CONFIG_PATH=${LIBRARY}/pkgconfig:$PKG_CONFIG_PATH
CFLAGS="`pkg-config ck --cflags` `pkg-config libelfmaster --cflags` $CFLAGS"
if test "$COMPILER" = "gcc" || test "$COMPILER" = "clang" || test "$COMPILER" = "mingw32" || test "$COMPILER" = "mingw64"; then
	LD=$CC # XXX: Extract LD path.
	if test "$WANT_PIC" = "yes"; then
		LDFLAGS="$LDFLAGS -fPIC"
		CFLAGS="$CFLAGS -fPIC"
		ALL_LIBS="libck.so libck.a"
		INSTALL_LIBS="install-so install-lib"
	else
		LDFLAGS="$LDFLAGS -fno-PIC"
		CFLAGS="$CFLAGS -fno-PIC"
		ALL_LIBS="libck.a"
		INSTALL_LIBS="install-lib"
	fi

	CFLAGS="-D_DEFAULT_SOURCE -D_GNU_SOURCE -D_BSD_SOURCE -std=gnu99 -Wall -W -Wundef -Wendif-labels -Wshadow -Wpointer-arith -Wcast-align -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes -Wnested-externs -Winline -Wdisabled-optimization -fstrict-aliasing -O2 -pipe -Wno-parentheses -g -rdynamic -fno-omit-frame-pointer -I${P_PWD}/include -I${BUILD_DIR}/include -I${HEADERS} ${CFLAGS}"
	CXXFLAGS="-D_DEFAULT_SOURCE -D_GNU_SOURCE -D_BSD_SOURCE -std=gnu++98 -Wall -W -Wundef -Wendif-labels -Wshadow -Wpointer-arith -Wcast-align -Wwrite-strings -Winline -Wdisabled-optimization -fstrict-aliasing -O2 -pipe -Wno-parentheses -g -rdynamic -fno-omit-frame-pointer -I${P_PWD}/include -I${BUILD_DIR}/include -I${HEADERS} ${CXXFLAGS}"
	PTHREAD_CFLAGS="-pthread"
	if test "$COMPILER" = "mingw64"; then
		ENVIRONMENT=64
		PLATFORM=x86_64
	fi
else
	assert "" "unknown compiler"
fi

for i in $REQUIRE_HEADER; do
	printf "Checking header file usability..."

	cat << EOF > .1.c
#include <$i>
int main(void){return(0);}
EOF
	$CC -o .1 .1.c 2> /dev/null
	hf_s=$?

	rm -f .1 .1.c
	if test $hf_s -eq 0; then
		echo "success [$i]"
	else
		echo "failed  [$i]"
		exit $EXIT_FAILURE
	fi
done

# Populate list of dependencies
case $SYSTEM in
	"freebsd")
		REQUIRE_LIBRARY="$REQUIRE_LIBRARY"
	;;
	*)
		REQUIRE_LIBRARY="$REQUIRE_LIBRARY dl"
	;;
esac

for i in $REQUIRE_LIBRARY; do
	printf "Checking dynamic libraries......."
	S=0

	L=`echo $i | cut -d ':' -f 1`
	V=`echo $i | cut -d ':' -f 2`

	if test "$V" != "$L"; then
		for k in $PL; do
			lib_path="${k}/lib${L}.${LIBSUFFIX}"
			check_lib $lib_path $V
			if test $? -eq 0 ; then
			    REPLACE="s#$V#$lib_path#g;$REPLACE"
			    S="1"
			    break;
			fi
		done
	else
		for k in $PL; do
			lib_path="${k}/lib${i}.${LIBSUFFIX}"
			check_lib $lib_path
			if test $? -eq 0 ; then
			    LDOBJECT="$LDOBJECT $lib_path"
			    S="1"
			    break;
			fi
		done
	fi

	if test "$S" != 1; then
		echo "failed [$i]"
		exit $EXIT_FAILURE
	fi
done

for i in $OPTIONAL_LIBRARY; do
	printf "Checking dynamic libraries......."
	S=0

	L=`echo $i | cut -d ':' -f 1`
	V=`echo $i | cut -d ':' -f 2`

	if test "$V" != "$L"; then
		for k in $PL; do
			lib_path="${k}/lib${L}.${LIBSUFFIX}"
			check_lib $lib_path $V
			if test $? -eq 0 ; then
			    REPLACE="s#$V#$lib_path#g;$REPLACE"
			    S="1"
			    break;
			fi
		done
	else
		for k in $PL; do
			lib_path="${k}/lib${i}.${LIBSUFFIX}"
			check_lib $lib_path
			if test $? -eq 0 ; then
			    LDOBJECT="$LDOBJECT $lib_path"
			    S="1"
			    break;
			fi
		done
	fi

	if test "$S" != 1; then
		echo "ignored [$V]"
		REPLACE="s#$V#$V#g;$REPLACE"
	fi
done

for i in $REQUIRE_LIBRARY_STATIC_NOW; do
	printf "Checking static libraries........"
	S=0

	L=`echo $i | cut -d ':' -f 1`
	V=`echo $i | cut -d ':' -f 2`

	if test "$V" != "$L"; then
		for k in $PL; do
			lib_path="${k}/lib${L}.${STATIC_LIBSUFFIX}"
			check_lib $lib_path $V
			if test $? -eq 0 ; then
			    REPLACE="s#$V#$lib_path#g;$REPLACE"
			    S="1"
			    break;
			fi
		done
	else
		for k in $PL; do
			lib_path="${k}/lib${i}.${STATIC_LIBSUFFIX}"
			check_lib $lib_path
			if test $? -eq 0 ; then
			    LDOBJECT="$LDOBJECT $lib_path"
			    S="1"
			    break;
			fi
		done
	fi

	if test "$S" != 1; then
		echo "failed [$i]"
		exit $EXIT_FAILURE
	fi
done

for i in $REQUIRE_LIBRARY_STATIC; do
	printf "Checking static libraries........"
	S=0

	L=`echo $i | cut -d ':' -f 1`
	V=`echo $i | cut -d ':' -f 2`

	if test "$V" != "$L"; then
		for k in $PL; do
			lib_path="${k}/lib${L}.${STATIC_LIBSUFFIX}"
			echo "searching $lib_path"
			check_lib $lib_path $V
			if test $? -eq 0 ; then
			    REPLACE="s#$V#$lib_path#g;$REPLACE"
			    S="1"
			    break;
			fi
		done
	else
		for k in $PL; do
			lib_path="${k}/lib${i}.${STATIC_LIBSUFFIX}"
			check_lib $lib_path
			if test $? -eq 0 ; then
			    LDOBJECT="$LDOBJECT $lib_path"
			    S="1"
			    break;
			fi
		done
	fi

	if test "$S" != 1; then
		echo "failed [$i]"
		exit $EXIT_FAILURE
	fi
done
LDOBJECT="$LDOBJECT"

# LDSONAME is a hack to support FreeBSD; we shouldn't rely on
# the way the rule is written in the Makefile ($*) here.
# Alternatively, we could have separate Makefile includes.
if test "$SYSTEM" = "linux"; then
    LD=$CC
    LDSONAME="-Wl,-soname,\$(basename \$(notdir \$*)).so"
else
    LD=/usr/bin/ld
    LDSONAME="-soname \$(basename \$(notdir \$*)).so"
fi

# Platform will be used as a macro.
PROFILE="${PROFILE:-$PLATFORM}"
PLATFORM="__${PLATFORM}__"

printf "Generating build files..........."

mkdir -p $P_PWD/build
mkdir -p $P_PWD/include
mkdir -p $P_PWD/src

generate include/configure.h.in $P_PWD/include/configure.h
generate build/libelfmaster.build.in $P_PWD/build/libelfmaster.build
generate build/libelfmaster.pc.in $P_PWD/build/libelfmaster.pc
generate src/Makefile.in $P_PWD/src/Makefile
generate regressions/Makefile.in $P_PWD/regressions/Makefile
generate Makefile.in $P_PWD/Makefile
touch src/*.c regressions/*.c
echo "success"
generate_stdout
