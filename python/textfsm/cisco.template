# The template file consists of two top level sections.
#
# 	The 'Value' definitions, which describe the columns of data to extract.
# 	One or more 'State' definitions, describing the various states of the engine whilst parsing data.
# A line is considered a comment if it starts with any optional white space then a hash i.e matches regular expression: "^\s*#".
#
# 
#
# 	One or more 'Value' lines are used to describe each column that will be in the resulting table. These Value lines must all appear before any state definitions and must be contiguous lines, separated only by comments.
# Chassis value will be null for single chassis routers.
Value Filldown Chassis (.cc.?-re.)
Value Required Slot (\d+)
Value State (\w+)
Value Temp (\d+)
Value CPUTemp (\d+)
Value DRAM (\d+)
Value Model (\S+)

# After the Value definitions, the State definitions are described. Each state definition is separated by a blank line. The first line is the state name, an alphanumeric word followed by a series of rules.
# 
#
# Allway starts in 'Start' state.
Start
#   Each state definition consists of a list of one or more rules. The FSM reads a line from the input buffer and tests it against each rule, in turn, starting from the top of the current state. If a rule matches the line, then the action is carried out and the process repeats (from the top of the state again) with the next line.
#
#   Rules are of the following format:
#
#   ^regex [-> action]
#
#   regex is a regular expression compared against input lines. The match is performed from the start of the input line, so the carat ('^') although implicit, is required syntax as a reminder of this behavior.
#
#   The regex may contain zero or more Value descriptors. Value descriptors are in the format $ValueName or ${ValueName} (the latter format is preferred) and indicate value assignment. The regex of the associated value is substituted into the rule regex, and if the line matches, the text that matches this Value is assigned to the current row. To indicate the end of line (EOL) use a double dollar sign '$$', this will be substituted for a single dollar sign during Value substitution.
#
#   Following a regexp, actions may be described, delimited by '->' and are of the format 'A.B C'.
#
#   Actions are broken down into three optional parts. A) Line Actions, actions on the input line. B) Record Actions, actions on the values collected so far. C) State transition.
#
#   If actions are not described i.e. no '->', then the default implicit action is Next.NoRecord.
	^${Chassis}
# Record current values and change state.
# No record will be output on first pass as 'Slot' is 'Required' but empty.
	^Routing Engine status: -> Record RESlot

# Multiple state definitions are to be separated by at least one blank line. Rules are described on consecutive lines immediately following the state name and must be indented by one or two white spaces and a carat ('^').
#
# Initially, the FSM will begin at the Start state. Input is only compared to the current state but a matched line can trigger a transition to a new state. Evaluation continues line by line until either EOF is encountered or the current state transitions to the End state.
# 
# The action can be optionally followed by white spaces and a new State. The State must be one of the reserved states or a valid state defined in the template. Upon matching, after any actions are performed normally, the next line is read from input and the current state is then changed to the new state and processing continues in this new state.
# A state transition was not strictly necessary but helpful for the example.
RESlot
	^\s+Slot\s+${Slot}
	^\s+Current state\s+${State}
	^\s+Temperature\s+${Temp} degrees
	^\s+CPU temperature\s+${CPUTemp} degrees
	^\s+DRAM\s+${DRAM} MB
# Transition back to Start state.
	^\s+Model\s+${Model} -> Start


# The FSM starts in state Start, so this label is mandatory and the template will not parse without it.
#
# If EOF was reached on the input then the EOF state is executed. 
#
# The End state is reserved and terminates processing of input lines and does not execute the EOF state.
#
# An implicit EOF state outputs the last record.
